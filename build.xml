<?xml version="1.0" encoding="UTF-8"?>
<project name="Meandre-Workbench" basedir="." default="dist">
    <import file="common.xml" />

    <svn failonerror="false">
        <wcVersion path="${basedir}" prefix="svn.root."/>
    </svn>

    <condition property="svn_revision" value="${svn.root.revision.max-with-flags}" else="custom">
        <isset property="svn.root.revision.max-with-flags"/>
    </condition>

   <!--#################### Project Properties #########################-->
    <property name="version" value="1.4.3"/>
    <property name="debug" value="false"/>

    <property name="src.gwt.dir" value="${basedir}/src"/>
    <property name="src.bootstrap.dir" value="${basedir}/src-bootstrap"/>
    <property name="lib.bootstrap.dir" value="${basedir}/lib/bootstrap"/>
    <property name="lib.deploy.dir" value="${basedir}/lib/deploy"/>
    <property name="lib.compiler.dir" value="${basedir}/lib/compiler"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.bootstrap.dir" value="${build.dir}/bootstrap"/>
    <property name="build.server.dir" value="${build.dir}/server"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="gwt.lib.dir" value="${basedir}/lib/build"/>
    <property name="gwt.output.dir" value="${build.dir}/gwtOutput"/>
    <property name="gwt.workbench" value="org.seasr.meandre.workbench.Workbench"/>
    <property name="bootstrap.class" value="org.seasr.meandre.workbench.bootstrap.JettyBootstrapper"/>
    <property name="web.xml" value="${basedir}/www/WEB-INF/web.xml"/>
    <property name="version.template" value="${basedir}/version.tpl"/>
    <property name="version.file" value="${src.gwt.dir}/org/seasr/meandre/workbench/client/Version.java"/>
    <property name="war.file" value="${dist.dir}/${ant.project.name}-${version}.${svn_revision}.war"/>

    <path id="deploy.classpath">
        <fileset dir="${lib.deploy.dir}" includes="*.jar"/>
    </path>

    <path id="run.classpath">
        <fileset dir="${dist.dir}/bootstrap/lib" includes="*.jar"/>
        <pathelement location="${dist.dir}/bootstrap"/>
    </path>

    <path id="gwt_compile.classpath">
        <fileset dir="${lib.compiler.dir}" includes="gwt-compiler.jar"/>
        <fileset dir="${gwt.lib.dir}" includes="*.jar"/>
        <pathelement location="${src.gwt.dir}"/>
        <path refid="deploy.classpath"/>
    </path>

    <path id="bootstrap.classpath">
        <fileset dir="${lib.bootstrap.dir}" includes="*.jar"/>
    </path>


    <!--######################### BUILD TARGETS ###########################-->

    <target name="init">
        <tstamp>
            <format property="TIMESTAMP" pattern="MMM d, yyyy h:mm:ssa Z"/>
        </tstamp>
    </target>

    <target name="prepare" depends="init" description="-> performs necessary preparation tasks for the build">
        <mkdir dir="${build.bootstrap.dir}"/>
        <mkdir dir="${build.server.dir}"/>
        <mkdir dir="${gwt.output.dir}"/>
        <mkdir dir="${dist.dir}/bootstrap/lib"/>

	<copy file="${version.template}" toFile="${version.file}" overwrite="true">
            <filterset>
                <filter token="VERSION" value="${version}"/>
                <filter token="REVISION" value="${svn_revision}"/>
                <filter token="BUILD_DATE" value="${TIMESTAMP}"/>
            </filterset>
        </copy>
    </target>

    <target name="clean" description="-> removes auto-generated files/folders">
        <delete dir="${build.bootstrap.dir}"/>
        <delete dir="${build.server.dir}"/>
        <delete dir="${gwt.output.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="gwt_compile" depends="prepare" description="-> compiles the main GWT source tree">
        <delete dir="${gwt.output.dir}"/>
        <java classname="com.google.gwt.dev.GWTCompiler" fork="yes" maxmemory="512m">
            <classpath refid="gwt_compile.classpath"/>
            <arg value="-out"/>
            <arg value="${gwt.output.dir}"/>
            <arg value="$@"/>
            <arg value="${gwt.workbench}"/>
        </java>
    </target>

    <target name="server_compile" depends="prepare" description="-> compiles the server-side code">
        <javac srcdir="${src.gwt.dir}" destdir="${build.server.dir}" classpathref="gwt_compile.classpath" debug="on" source="1.5"/>
    </target>

    <target name="bootstrap_compile" depends="prepare" description="-> compiles the bootstrapper">
        <javac srcdir="${src.bootstrap.dir}" destdir="${build.bootstrap.dir}" classpathref="bootstrap.classpath" debug="on" source="1.5"/>
    </target>

    <target name="compile" depends="gwt_compile, server_compile, bootstrap_compile" description="-> compiles the entire project"/>

    <target name="dist" depends="compile" description="-> creates WAR distribution">
        <copy todir="${dist.dir}/bootstrap">
            <fileset dir="${build.bootstrap.dir}"/>
        </copy>

        <copy file="${src.bootstrap.dir}/workbench-jetty.xml" todir="${dist.dir}/bootstrap" />

        <copy todir="${dist.dir}/bootstrap/lib">
            <fileset dir="${lib.bootstrap.dir}"/>
        </copy>

        <war destfile="${war.file}" webxml="${web.xml}">
            <fileset dir="${gwt.output.dir}/${gwt.workbench}"/>
            <lib dir="${lib.deploy.dir}"/>
            <classes dir="${build.server.dir}"/>
        </war>
    </target>

    <target name="run" depends="dist" description="-> compiles and runs Meandre-Workbench">
        <antcall target="run-fast"/>
    </target>

    <condition property="can.run-fast">
        <and>
            <available file="${war.file}"/>
            <available file="${dist.dir}/bootstrap/workbench-jetty.xml"/>
            <available classname="${bootstrap.class}" classpathref="run.classpath"/>
        </and>
    </condition>

    <target name="run-fast" depends="run-fast.check" if="can.run-fast" description="-> runs an already compiled Meandre-Workbech">
        <java classname="${bootstrap.class}" fork="yes" maxmemory="1024m">
            <sysproperty key="org.seasr.meandre.workbench.debug" value="${debug}" />
            <classpath refid="run.classpath"/>
            <arg value="${war.file}"/>
            <arg value="${dist.dir}/bootstrap/workbench-jetty.xml"/>
        </java>
    </target>

    <target name="run-fast.check" unless="can.run-fast">
        <echo message="Cannot perform run-fast - required files are missing. Performing full build..."/>
        <antcall target="dist"/>

        <condition property="can.run-fast">
            <and>
                <available file="${war.file}"/>
                <available file="${dist.dir}/bootstrap/workbench-jetty.xml"/>
                <available classname="${bootstrap.class}" classpathref="run.classpath"/>
            </and>
        </condition>
    </target>

</project>

<!-- DO NOT EDIT BELOW THIS LINE PLEASE -->
<!-- vim:sw=4:softtabstop=4:expandtab
-->
