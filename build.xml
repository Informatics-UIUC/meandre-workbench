<?xml version="1.0" encoding="utf-8" ?>
<project name="Meandre-Workbench" default="build" basedir=".">
  <import file="common.xml" />

  <svn refid="svn.settings">
    <wcVersion path="${basedir}" prefix="svn.root."/>
  </svn>

  <condition property="svn_revision" value="${svn.root.revision.max-with-flags}" else="custom">
    <isset property="svn.root.revision.max-with-flags"/>
  </condition>

  <!--#################### Project Properties #########################-->
  <property name="version" value="1.4.11"/>

  <!-- compilation settings -->
  <property name="source" value="1.5"/>
  <property name="target" value="1.5"/>
  <property name="debug" value="true"/>
  <property name="debuglevel" value="lines,vars,source"/>

  <property name="src.dir" value="${basedir}/src"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="war.dir" value="${basedir}/war"/>
  <property name="dist.dir" value="${basedir}/dist"/>

  <property name="src.bootstrap.dir" value="${basedir}/src-bootstrap"/>
  <property name="lib.bootstrap.dir" value="${lib.dir}/bootstrap"/>
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.gwt.dir" value="${build.dir}/gwt"/>
  <property name="build.bootstrap.dir" value="${build.dir}/bootstrap"/>
  <property name="bootstrap.class" value="org.seasr.meandre.workbench.bootstrap.JettyBootstrapper"/>

  <property name="war.lib.dir" value="${war.dir}/WEB-INF/lib"/>
  <property name="war.classes.dir" value="${war.dir}/WEB-INF/classes"/>
  <property name="gwt.sdk.dir" location="${lib.dir}/gwt"/>
  <property name="gwt.args" value=""/>

  <property name="lib.support.dir" value="${lib.dir}/support"/>
  <property name="lib.build.dir" value="${lib.dir}/build"/>

  <property name="gwt.workbench" value="org.seasr.meandre.workbench.Workbench"/>
  <property name="war.workbench" value="${war.dir}/workbench"/>
  <property name="workbench.homepage" value="Workbench.html"/>
  <property name="workbench.war.file" value="${dist.dir}/${ant.project.name}-${version}.${svn_revision}.war"/>
  <property name="workbench.jar.file" value="${dist.dir}/${ant.project.name}-${version}.${svn_revision}.jar"/>
  <property name="version.template" value="${basedir}/version.tpl"/>
  <property name="versionfile.dir" value="${src.dir}/org/seasr/meandre/workbench/server"/>

 
  <path id="project.classpath">
    <pathelement location="${build.gwt.dir}"/>
    <pathelement location="${gwt.sdk.dir}/gwt-user.jar"/>
    <fileset dir="${gwt.sdk.dir}" includes="gwt-dev*.jar"/>
    <fileset dir="${lib.build.dir}" includes="**/*.jar"/>
    <fileset dir="${war.lib.dir}" includes="**/*.jar"/>
  </path>

  <path id="bootstrap.classpath">
    <fileset dir="${lib.bootstrap.dir}" includes="**/*.jar"/>
  </path>

  <!--######################### BUILD TARGETS ###########################-->

  <target name="init">
    <tstamp>
        <format property="TIMESTAMP" pattern="MMM d, yyyy h:mm:ssa Z"/>
    </tstamp>
  </target>

  <target name="prepare" depends="init" description="-> performs necessary preparation tasks for the build">
    <mkdir dir="${build.gwt.dir}"/>
    <mkdir dir="${build.bootstrap.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <copy file="${version.template}" tofile="${build.dir}/Version.java" overwrite="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
        <filter token="REVISION" value="${svn_revision}"/>
      </filterset>
    </copy>

    <copy todir="${versionfile.dir}" overwrite="true">
      <fileset file="${build.dir}/Version.java">
        <modified/>
      </fileset>
    </copy>

    <delete file="${build.dir}/Version.java"/>
  </target>

  <target name="libs">
    <mkdir dir="${war.lib.dir}" />
    <copy todir="${war.lib.dir}" file="${gwt.sdk.dir}/gwt-servlet.jar" />
  </target>

  <target name="javac" depends="prepare,libs" description="-> compile Java source to bytecode">
    <javac srcdir="${src.dir}" encoding="utf-8"
           destdir="${build.gwt.dir}"
           classpathref="project.classpath"
           source="${source}" target="${target}" nowarn="true"
           debug="${debug}" debuglevel="${debuglevel}"
           includeantruntime="false"/>

    <javac srcdir="${src.bootstrap.dir}" encoding="utf-8"
           destdir="${build.bootstrap.dir}" 
           classpathref="bootstrap.classpath"
           source="${source}" target="${target}"
           debug="${debug}" debuglevel="${debuglevel}" 
           includeantruntime="false"/>

    <copy todir="${build.gwt.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="-> GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="${src.dir}"/>
        <path refid="project.classpath"/>
        <fileset dir="${gwt.sdk.dir}" includes="validation-api-*.jar"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <arg line="-war"/>
      <arg value="${war.dir}"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="${gwt.workbench}"/>
    </java>
  </target>

  <target name="devmode" depends="javac" description="-> run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="${src.dir}"/>
        <path refid="project.classpath"/>
        <fileset dir="${gwt.sdk.dir}" includes="validation-api-*.jar"/>
      </classpath>
      <jvmarg value="-Xmx256M"/>
      <arg value="-startupUrl"/>
      <arg value="${workbench.homepage}"/>
      <arg line="-war"/>
      <arg value="${war.dir}"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="${gwt.workbench}"/>
    </java>
  </target>

  <target name="build" depends="gwtc" description="-> build the entire project" />

  <target name="war" depends="build" description="-> create a deployable WAR file">
    <war destfile="${workbench.war.file}" 
         basedir="${war.dir}" excludes="META-INF/**/*, WEB-INF/**/*"
         webxml="${war.dir}/WEB-INF/web.xml">
      <lib dir="${war.lib.dir}"/>
      <classes dir="${build.gwt.dir}"/>
      <manifest>
        <attribute name="Build-Version" value="${version}.${svn_revision}"/>
        <attribute name="Build-Date" value="${TIMESTAMP}"/>
      </manifest>
    </war>
  </target>

  <target name="jar" depends="war" description="-> created a runnable JAR file">
    <jar destfile="${workbench.jar.file}">
      <fileset dir="${build.bootstrap.dir}"/>
      <zipgroupfileset dir="${lib.bootstrap.dir}" includes="*.jar"/>
      <fileset file="${src.bootstrap.dir}/workbench-jetty.xml"/>
      <zipfileset file="${workbench.war.file}" fullpath="Meandre-Workbench.war"/>
        <manifest>
          <attribute name="Build-Version" value="${version}.${svn_revision}"/>
          <attribute name="Build-Date" value="${TIMESTAMP}"/>
          <attribute name="Main-Class" value="org.seasr.meandre.workbench.bootstrap.JettyBootstrapper"/>
        </manifest>
    </jar>
  </target>

  <target name="dist" depends="war, jar" description="-> created a complete Workbench distribution"/>

  <target name="run" depends="dist" description="-> compiles and runs Meandre-Workbench">
    <antcall target="run-fast"/>
  </target>

  <condition property="can.run-fast">
    <and>
      <available file="${workbench.jar.file}"/>
      <available classname="${bootstrap.class}" classpath="${workbench.jar.file}"/>
    </and>
  </condition>

  <target name="run-fast" depends="run-fast.check" if="can.run-fast" description="-> runs an already compiled Meandre-Workbech">
    <java jar="${workbench.jar.file}" fork="yes" maxmemory="1024m">
      <sysproperty key="org.seasr.meandre.workbench.debug" value="${debug}" />
    </java>
  </target>

  <target name="run-fast.check" unless="can.run-fast">
      <echo message="Cannot perform run-fast - required files are missing. Performing full build..."/>
      <antcall target="dist"/>

      <condition property="can.run-fast">
        <and>
          <available file="${workbench.jar.file}"/>
          <available classname="${bootstrap.class}" classpath="${workbench.jar.file}"/>
        </and>
      </condition>
  </target>

  <target name="clean" description="-> removes auto-generated files/folders">
    <delete dir="${war.dir}/../gwt-unitCache" failonerror="false"/>
    <delete dir="${war.workbench}" failonerror="false"/>
    <delete dir="${war.dir}/WEB-INF/deploy" failonerror="false"/>
    <delete dir="${build.dir}" failonerror="false"/>
    <delete dir="${dist.dir}" failonerror="false"/>
    <delete dir="log" failonerror="false"/>
  </target>

</project>

<!-- DO NOT EDIT BELOW THIS LINE PLEASE -->
<!-- vim:sw=4:softtabstop=4:expandtab
-->
